package TCars.dao;

import TCars.domain.Car;

import static org.junit.Assert.*;

import org.junit.*;
import org.junit.rules.Timeout;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.hamcrest.CoreMatchers.*;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;


@RunWith(JUnit4.class)
public class CarDaoTest
{
    private static final Logger LOGGER = Logger.getLogger(CarDaoTest.class.getCanonicalName());

    @Rule
    public Timeout globalTimeout = new Timeout(1000);

    public static String url = "jdbc:hsqldb:hsql://localhost/workdb";

    CarDao carManager;
    List<Car> expectedDbState;

    @Before

    public void setup() throws SQLException {
        Connection connection = DriverManager.getConnection(url);
        try{
            connection.createStatement()
                    .executeUpdate("CREATE TABLE " + "Car(id bigint GENERATED BY DEFAULT AS IDENTITY,"
                    + "make varchar(30) NOT NULL, " + "model varchar(30) NOT NULL," + "color varchar(30) NOT NULL)");
        } catch (SQLException e) {}

        Random rand = new Random();
        PreparedStatement addCarStatement = connection.prepareStatement(
                "INERT INTO Car (make, model, color) VALUES (?, ?, ?)",
                Statement.RETURN_GENERATED_KEYS);

        expectedDbState = new LinkedList<Car>();
        for (int i = 0; i < 10; i++){
            Car car = new Car("Fiat" , "500", "type" + rand.nextInt(100)); //ZbadaÄ‡
            try {
                addCarStatement.setString(1, car.getMake());
                addCarStatement.setString(2, car.getModel());
                addCarStatement.setString(3, car.getColor());
                addCarStatement.executeUpdate();
                ResultSet generatedKeys = addCarStatement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    car.setId(generatedKeys.getLong(1));
                }

            }catch (SQLException e){
                throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
            }
            expectedDbState.add(car);

        }
        carManager = new CarDaoJdbcImpl(connection);
    }

    @After
    public void cleanup() throws SQLException{
        Connection connection = DriverManager.getConnection(url);
        try {
            connection.prepareStatement("DELETE FROM Car").executeUpdate();
        } catch (Exception e) {
            LOGGER.log(Level.FINEST,"Probably the database was not yet initialized");
        }
    }


    @Test
    public void checkAdding() throws Exception {
        Car car = new Car();
        car.setMake("Fiat");
        car.setModel("Seicento");
        car.setColor("Black");

        assertEquals(1, personManager.addPerson(person));

        expectedDbState.add(person);
        assertThat(personManager.getAllPersons(), equalTo(expectedDbState));
    }

    @Test
    public void createDaoObjectTest() {
        assertNotNull(dao);
    }

    @Test
    public void createCarTest() {
        assertNotNull(1L);
    }

    @Test
    public void getCarThatExistsTest()
    {
        Optional<Car> c = dao.get(2L);
        assertThat(c.get().getModel(), is("V40"));

    }

    @Test
    public void getById(){
        long idToFind = 1L;
        assertNotNull(dao.get(idToFind));
    }

    @Test
    public void saveNewCar()
    {
        Car car3 = new Car();
        car3.setId(3L);
        car3.setMake("Ferrari");
        car3.setModel("488 Pista");
        car3.setColor("White");

        dao.save(car3);
        Optional<Car> c = dao.get(3L);
        assertThat(c.get().getModel(), is("488 Pista"));
        assertThat(c.get().getColor(), is("White"));

    }
    @Test(expected = IllegalArgumentException.class)
    public void saveNewCarOnAlreadyUsedID()
    {
        Car car3 = new Car();
        car3.setId(1L);
        car3.setMake("Ferrari");
        car3.setModel("488 Pista");
        car3.setColor("White");

        dao.save(car3);


    }

    @Test
    public void updateExistingCar(){
        Car car1 = new Car();
        car1.setId(1);

        car1.setModel("Tempra");

        Collection<Car> listExpected = dao.cars.values();
        for(Car c:listExpected) if (c.getId()==1) c.setModel("Tempra");


        dao.update(car1);

        Collection<Car> listAfter = dao.cars.values();
        assertArrayEquals(listExpected.toArray(), listAfter.toArray());

        //Optional<Car> c = dao.get(1L);

        //assertThat(c.get().getModel(), is("Tempra"));
        //assertThat(c.get().getColor(), is("Black"));
    }
    @Test(expected = java.util.NoSuchElementException.class)
    public void deleteExistingCar(){

        Car car1 = new Car();
        car1.setId(1L);
        dao.delete(car1);

        Optional<Car> c = dao.get(1L);

        assertThat(c.get().getModel(), is("Seicento"));
        //assertThat(c.get().getColor(), is("Black"));


    }


    @Test
    public void getAll(){

        assertNotNull(dao.getAll());

    }
     /*
    @Test
    public void addCar() {
        Car car = new Car();
        car.setId(1);
        car.setMake("Fiat");
        car.setModel("Seicento");
        CarRepository.add(car);
        assertNotNull(CarRepository.getById(car.getId()));
    }

    @Test
    public void deleteCar() {
        Car car = CarRepository.getById(1);
        Car carToTest = CarRepository.getById(2);
        CarRepository.delete(car);
        assertNull(CarRepository.getById(car.getId()));
    }

*/
}